{"version":3,"sources":["wrappers/ProtectedRoutes.js","components/header/header.js","components/loader/loader.js","App.js","serviceWorker.js","index.js","firebase/context.js","firebase/config.js","firebase/firebase.js","firebase/index.js"],"names":["ProtectedRoutesWrapped","withFirebase","firebase","Component","component","useState","loading","setLoading","user","setUser","location","useLocation","auth","onAuthStateChanged","icon","size","pathname","split","map","i","k","Item","key","String","charAt","toUpperCase","substr","status","title","HeaderWrapped","usermenu","onClick","signOut","then","window","replace","mode","style","float","overlay","displayName","signInWithRedirect","GoogleOutlined","Loader","Content","Layout","Header","Footer","LandingPageWrapped","React","lazy","DashboardWrapped","CreateUpdateExam","App","Provider","value","Firebase","className","padding","fallback","path","exact","Date","getFullYear","GithubFilled","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","FirebaseContext","createContext","props","Consumer","dev","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getUser","currentUser","GoogleAuthProvider","fetchExamList","app","firestore","collection","where","email","get","this","initializeApp"],"mappings":"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","file":"static/js/main.a776e11f.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport {withFirebase} from '../firebase';\nimport { Result,Spin, Breadcrumb } from 'antd';\nimport { useLocation } from 'react-router-dom';\n\nfunction ProtectedRoutes({firebase,component:Component}){\n\n    const [loading,setLoading] = useState(true)\n    const [user,setUser] = useState(null)\n    const location = useLocation()\n\n    firebase.auth.onAuthStateChanged(user=>{\n        if(user){\n            setLoading(false)\n            setUser(user)\n        }\n        else{\n            setLoading(false)\n            setUser(null)\n        }\n    })\n    \n    if(loading){\n    return <Result icon={<Spin size=\"large\"/>}/>\n    }\n    if(user){\n        return (\n        <Fragment>\n            <Breadcrumb>\n                {location.pathname.split(\"/\").map((i,k)=>{\n                    return (<Breadcrumb.Item key={k}>{String(i).charAt(0).toUpperCase()+String(i).substr(1)}</Breadcrumb.Item>)\n                })}\n            </Breadcrumb>\n            <Component user={user} firebase={firebase}/>\n        </Fragment>)\n    }\n    else{\n        return <Result status=\"info\" title=\"You Are Logged Out\"/>\n    }\n}\n\n\nconst ProtectedRoutesWrapped =  withFirebase(ProtectedRoutes);\n\nexport default ProtectedRoutesWrapped;\nexport {ProtectedRoutes};","import React, { useState } from 'react';\nimport {Button, Menu, Dropdown, Spin } from 'antd';\nimport {withFirebase} from '../../firebase';\nimport {GoogleOutlined} from '@ant-design/icons';\n\nexport default function Header({firebase}){\n\n    const [loading,setLoading] = useState(true);\n    const [user,setUser] = useState(null);\n\n\n    firebase.auth.onAuthStateChanged(user=>{\n        setLoading(false)\n        if(user){\n            setUser(user)\n        }\n        else{\n            setUser(null)\n        }\n    })\n\n    const handleSignIn = () => {\n        setLoading(true)\n        firebase.signInWithRedirect()\n    }\n\n    const handleSignOut = () => {\n        setLoading(true)\n        firebase.signOut().then(()=>{\n            window.location.replace(\"/\")\n        })\n    }\n\n    const usermenu = (\n        <Menu>\n            <Menu.Item>Profile</Menu.Item>\n            <Menu.Item onClick = {()=>handleSignOut()}>Logout</Menu.Item>\n        </Menu>\n    )\n\n    return <Menu mode=\"horizontal\" >\n        <Menu.Item onClick={()=>{window.location.replace(\"/\")}}><strong>Actuator XMS</strong></Menu.Item>\n        <Menu.Item>Help & Support</Menu.Item>\n        <Menu.Item style={{float:'right'}}>\n            {loading?<Spin/>:user?\n                <Dropdown overlay={usermenu}>\n                        <li>{user.displayName}</li>\n                </Dropdown>\n            :\n            <Button onClick={()=>handleSignIn()}><GoogleOutlined/>Sign In With Google</Button>\n            }\n        </Menu.Item>\n    </Menu>\n}\n\n\nconst HeaderWrapped = withFirebase(Header)\nexport {HeaderWrapped}","import React from 'react';\nimport { Spin, Result } from 'antd';\n\nconst Loader = ()=>(\n\n    <Result icon={<Spin/>}/>\n\n)\n\nexport default Loader;","import React, { Suspense } from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Firebase,{FirebaseContext} from './firebase';\nimport {Layout} from 'antd'\nimport ProtectedRoutesWrapped from './wrappers/ProtectedRoutes';\nimport {HeaderWrapped} from './components/header/header';\nimport { GithubFilled } from '@ant-design/icons';\nimport Loader from './components/loader/loader';\n\nconst {Content, Header, Footer} = Layout\nconst LandingPageWrapped = React.lazy( ()=> import('./pages/landing/landingPage'));\nconst DashboardWrapped = React.lazy( ()=> import('./pages/dashboard/DashboardPage'));\nconst CreateUpdateExam = React.lazy( ()=> import('./components/exam/CreateUpdateExamComponent'));\nfunction App() {\n  return (\n    <FirebaseContext.Provider value={new Firebase()}>\n      <div className=\"App\">\n          <Layout className=\"layout\">\n            <Header style={{padding:\"0px\"}}>\n              <HeaderWrapped/>\n            </Header>\n            <Content>\n            <div className=\"site-layout-content\">\n        <Suspense fallback={<Loader/>}>\n              <Router>\n                  <Switch>\n                    <Route path=\"/\" exact component={LandingPageWrapped} />\n                    <Route path=\"/exam/view/:id\" exact component={LandingPageWrapped} />\n                    <Route path=\"/app\" exact>\n                        <ProtectedRoutesWrapped component={DashboardWrapped}/>\n                    </Route>\n                    <Route path=\"/app/exam/new\" exact>\n                        <ProtectedRoutesWrapped component={CreateUpdateExam}/>\n                    </Route>\n                  </Switch>\n              </Router>\n        </Suspense>\n              </div>\n            </Content>\n            <Footer className=\"site-layout-footer\">ActutatorXMS Â©{new Date().getFullYear()} <br/><GithubFilled/> <a href=\"http://www.github.com/shehankule\">shehankule</a></Footer>\n          </Layout>\n      </div>\n    </FirebaseContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css'\nimport './assets/css/app.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase}/>}\n    </FirebaseContext.Consumer>\n)\n\nexport default FirebaseContext;","const dev = {\n    apiKey: \"AIzaSyB9j5EHgcNBHbVZw88TT4UOlw1vDmvh2t8\",\n    authDomain: \"actuator-exam-portal.firebaseapp.com\",\n    databaseURL: \"https://actuator-exam-portal.firebaseio.com\",\n    projectId: \"actuator-exam-portal\",\n    storageBucket: \"actuator-exam-portal.appspot.com\",\n    messagingSenderId: \"117499171112\",\n    appId: \"1:117499171112:web:13314aa69721da279b401d\"\n  };\n\nexport default dev;","import firebase from 'firebase/app';\nimport  'firebase/auth';\nimport 'firebase/firestore'\nimport dev from './config';\n\nclass Firebase {\n    constructor() {\n      this.app = firebase.initializeApp(dev);\n      this.auth = firebase.auth()\n    }\n\n    getUser = () =>{\n        return this.auth.currentUser    \n    }\n\n    signInWithRedirect = () =>{\n        return this.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider())\n    }\n\n    signOut = () =>{\n        return this.auth.signOut()\n    }\n    \n    // Firestore methods.\n    fetchExamList = () => {\n        return this.app.firestore().collection(`exams`).where(\"owner\",\"==\",this.getUser().email).get();\n    }\n\n\n  }\n   \n  export default Firebase;\n","import FirebaseContext, {withFirebase} from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\nexport {FirebaseContext,withFirebase};"],"sourceRoot":""}