{"version":3,"sources":["components/exam/QuestionModal.js","components/exam/CandidateModal.js","pages/exam/CreateUpdateExamPage.js","components/exam/CreateUpdateExamComponent.js"],"names":["QuestionModal","setExamQuestion","question","setQuestion","active","setActive","update","setUpdate","updateExamQuestion","visible","onCancel","onOk","id","uid","title","TextArea","value","onChange","e","target","maxLength","placeholder","CandidateModal","setExamCandidates","candidate","setCandidate","email","otp","type","CreateUpdateExamPage","examTitle","examDate","examStartTime","examDuration","examQuestions","examCandidates","examPolicy","setExamTitle","setExamDate","setExamStartTime","setExamDuration","setExamQuestions","setExamPolicy","deleteExamQuestion","deleteExamCandidate","history","updateExamCandidate","useHistory","useState","questionModalState","setQuestionModalState","candidateModalState","setCandidateModalState","gutter","md","onBack","push","className","status","text","length","Group","compact","Title","level","style","backgroundColor","checked","defaultChecked","TIME","disabled","dataSource","Column","width","dataIndex","key","render","onClick","filter","EditFilled","placement","onConfirm","DeleteFilled","size","PlusOutlined","CreateUpdateExamComponent","setState","Date","startTime","duration","state","concat","message","success","name","newPolicy","Object","assign","console","log","deleteid","item","deleteuid","examId","this","React","Component"],"mappings":"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","file":"static/js/6.81cb9705.chunk.js","sourcesContent":["import React from 'react';\nimport {Modal, Input} from 'antd';\nimport uid from 'uid';\n\nconst QuestionModal = ({setExamQuestion,question,setQuestion,active,setActive,update,setUpdate,updateExamQuestion})=>(\n    <Modal\n    visible={active}\n    onCancel={()=>{\n        setQuestion(null);\n        setActive(false)}}\n    onOk ={()=>{\n        if(update){\n            //TODO: Create an Update method in CreateUpdateExamComponent\n            updateExamQuestion(update,question);\n            setUpdate(null)\n        }else{\n\n            setExamQuestion({id:uid(4),title:question})\n        }\n        \n        ;setQuestion(null);setActive(false)}}\n    title = {update?\"Update Question\":\"Create New Question\"}\n    >\n        <Input.TextArea value={question}  onChange={(e)=>setQuestion(e.target.value)}maxLength={300} placeholder=\"Question Content. Max Length 300\"/>\n\n    </Modal>\n)\n\nexport default QuestionModal;","import React from 'react';\nimport {Modal, Input} from 'antd';\nimport uid from 'uid';\n\nconst CandidateModal = ({setExamCandidates,active,setActive,candidate,setCandidate})=>(\n    <Modal\n    visible={active}\n    onCancel={()=>setActive(false)}\n    onOk ={()=>\n        {\n            setExamCandidates({email:candidate,otp:uid(5)});\n            setCandidate(null)\n            setActive(false);\n        }\n    }\n    title = {\"Add New Candidate\"}\n    >\n        <Input type=\"email\" value={candidate} onChange={(e)=>setCandidate(e.target.value)}/>\n\n    </Modal>\n)\n\nexport default CandidateModal;","import React, { useState } from 'react';\nimport { Row,Col, PageHeader, Input, DatePicker, Typography, Divider, TimePicker, Button,Table,Popconfirm, Badge, Switch } from 'antd';\nimport { PlusOutlined, EditFilled, DeleteFilled} from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\n\nimport QuestionModal from '../../components/exam/QuestionModal';\nimport CandidateModal from '../../components/exam/CandidateModal';\n\nexport default function CreateUpdateExamPage({\n    examTitle,\n    examDate,\n    examStartTime,\n    examDuration,\n    examQuestions,\n    examCandidates,\n    examPolicy,\n    setExamTitle,\n    setExamDate,\n    setExamStartTime,\n    setExamDuration,\n    setExamQuestions,\n    setExamCandidates,\n    setExamPolicy,\n    deleteExamQuestion,\n    deleteExamCandidate,\n    updateExamQuestion,\n    updateExamCandidate\n}){\n    const history = useHistory();\n\n    const [questionModalState,setQuestionModalState] = useState(false);\n    const [question,setQuestion] = useState(null)\n    const [update,setUpdate] = useState(null);\n\n    const [candidateModalState,setCandidateModalState] = useState(false);\n    const [candidate,setCandidate] = useState(null);\n\n\n\n    return(\n        <Row gutter={[24,24]}>\n\n            <Col md={5}>\n                <PageHeader \n                onBack={()=>history.push(\"/app\")}\n                title=\"New Exam\"/> \n                \n                <div className=\"\">\n                    <Badge status={examTitle?\"success\":\"default\"} text=\"Basic Information\"/><br/>\n                    <Badge status={examDate&&examStartTime&&examDuration?\"success\":\"default\"} \n                    text=\"Schedule\"/><br/>\n                    <Badge status={examQuestions.length?\"success\":\"default\"} text=\"Questions\"/><br/>\n                    <Badge status={examCandidates.length?\"success\":\"default\"} text=\"Candidates\"/><br/>\n                    <Badge status=\"default\" text=\"Publish\"/>\n\n                </div>\n                \n            </Col>\n\n            <Col className=\"component-content\" md ={16}>\n                <Input.Group compact >\n                    <Typography.Title level={3}>Basic Information </Typography.Title>\n                    <Input \n                    value={examTitle}\n                    placeholder=\"Examination Title\"\n                    onChange={(e)=>setExamTitle(e.target.value)}\n                    />\n                    <Divider style={{backgroundColor:\"darkGray\"}}/>\n                </Input.Group>\n\n                <Input.Group>\n                    <Typography.Title level={3}>Schedule</Typography.Title>\n                     <Switch onChange={(checked)=>setExamPolicy(\"TIME\",checked)} className=\"btn-section-toggle\"  defaultChecked={examPolicy.TIME}/>\n                    <DatePicker disabled={!examPolicy.TIME} onChange={(value)=>setExamDate(value)}  value={examDate} />\n                    <TimePicker disabled={!examPolicy.TIME} onChange={(value)=>setExamStartTime(value)}  value={examStartTime} />\n                    <TimePicker disabled={!examPolicy.TIME} onChange={(value)=>setExamDuration(value)}  value={examDuration} placeholder=\"Select Duration\"/>\n                    <Divider style={{backgroundColor:\"darkGray\"}}/>\n                </Input.Group>\n                <Input.Group>\n                    <Typography.Title level={3}>Questions</Typography.Title> \n                    \n                    <Table dataSource={examQuestions} >\n                        <Table.Column width=\"80%\" title=\"Question\" dataIndex=\"title\"/>\n                        <Table.Column title=\"Options\" dataIndex=\"id\" key=\"title\" \n                            render={id=>(\n                            <>\n                            <Button \n                            onClick={()=>{\n                                setQuestion(examQuestions.filter(question=>{return question.id===id})[0].title);\n                                setUpdate(id)\n                                setQuestionModalState(true)}}\n                            type=\"dashed\"><EditFilled/></Button>\n                            <Popconfirm \n                                title=\"Delete Question?\"\n                                placement=\"bottom\"\n                                onConfirm={()=>deleteExamQuestion(id)} >\n                            <Button  type=\"dashed\"><DeleteFilled/></Button>\n                            </Popconfirm>\n                            </>)}\n                        />\n                    </Table>  \n                    \n                    <Button className=\"btn-add-float-question\" type=\"primary\"  size=\"large\" \n                        onClick={()=>setQuestionModalState(true)}\n                    >\n                    Add Questions            \n                        <PlusOutlined/>\n                    </Button> \n                         <Divider style={{backgroundColor:\"darkGray\"}}/>\n                </Input.Group>\n                <Input.Group>\n                    <Typography.Title level={3}>Candidates</Typography.Title> \n                    <Table dataSource={examCandidates}>\n                        <Table.Column  title=\"Email\" dataIndex=\"email\"/>\n                        <Table.Column  title=\"OTP\" dataIndex=\"otp\"/>\n                        <Table.Column title=\"Options\" dataIndex=\"otp\" key=\"otp\" \n                            render={\n                                otp => (\n                                    <Popconfirm \n                                    title=\"Delete Candidate?\"\n                                    placement=\"bottom\"\n                                    onConfirm={()=>deleteExamCandidate(otp)} >\n                                <Button  type=\"dashed\"><DeleteFilled/></Button>\n                                </Popconfirm>\n                                )\n                            }\n                        />\n                    </Table>  \n                    <Button onClick = {()=>setCandidateModalState(true)}\n                    className=\"btn-add-float-question\" type=\"primary\"  size=\"large\" >\n                    Add Candidates<PlusOutlined/>\n                    </Button> \n                </Input.Group>\n            </Col>\n\n            <QuestionModal \n            active={questionModalState} \n            setActive={setQuestionModalState} \n            question={question}\n            setQuestion={setQuestion}\n            setExamQuestion={setExamQuestions}\n            update={update}\n            setUpdate={setUpdate}\n            updateExamQuestion={updateExamQuestion}\n                            />\n\n            <CandidateModal\n                candidate={candidate}\n                setCandidate={setCandidate}\n                setExamCandidates={setExamCandidates}\n                active={candidateModalState}\n                setActive={setCandidateModalState}\n            />\n        </Row>\n    )\n\n}","import React from 'react';\nimport CreateUpdateExamPage from '../../pages/exam/CreateUpdateExamPage';\nimport uid from 'uid';\nimport { message } from 'antd';\n\nexport default class CreateUpdateExamComponent extends React.Component{\n    constructor({id,title,...rest}){\n        super()\n        this.state = {\n            examId:id||uid(10),\n            examTitle:title,\n            examDate:null,\n            examStartTime:null,\n            examDuration:null,\n            examQuestions:[],\n            examCandidates:[],\n            examPolicy:{TIME:true}\n        }\n\n    }\n    \n    componentDidMount(){\n        \n    }\n    \n    setExamTitle = (title) =>{\n        this.setState({\n            examTitle:title\n        })}\n    setExamDate = (Date) =>{\n        this.setState(()=>({\n            examDate:Date\n        }))}\n    setExamStartTime = (startTime) =>{\n        this.setState(()=>({\n            examStartTime: startTime\n        }))}\n    setExamDuration = (duration) =>{\n        this.setState(()=>({\n            examDuration:duration\n        }))}\n    setExamQuestions = (question) =>{\n        this.setState((state)=>({\n            examQuestions: state.examQuestions.concat(question)\n        }),()=>{\n            message.success(\"Question Added\")\n        })}\n    setExamCandidates = (candidate) =>{\n        this.setState((state)=>({\n            examCandidates: [...state.examCandidates,candidate]\n        }),()=>{\n            message.success(\"Candidate Added\")\n        })}  \n    \n    setExamPolicy = (name,value) => {\n        let newPolicy = Object.assign({},this.state.examPolicy);\n        newPolicy[name] = value;\n        this.setState((state)=>({\n            examPolicy: newPolicy\n        }),()=>{\n            console.log(this.state.examPolicy)\n            message.success(\"Exam Policy Updated\")})\n    }    \n\n    deleteExamQuestion = (deleteid) =>{\n        this.setState((state)=>({\n            examQuestions: state.examQuestions.filter(item=>{return item.id!==deleteid})\n        }),()=>{\n            message.success(\"Question Deleted\")\n        })\n    }\n\n    deleteExamCandidate = (deleteuid) =>{\n        this.setState((state)=>({\n            examCandidates: state.examCandidates.filter(item=>{return item.otp !== deleteuid})\n        }),()=>{\n            message.success(\"Candidate Deleted\")\n        })\n    }\n\n    updateExamQuestion = (id,title) => {\n        this.setState((state)=>({\n            examQuestions: state.examQuestions.filter(item=>{return item.id!==id}).concat({id:id,title:title})\n        }),()=>{\n            message.success(\"Question Updated\")\n        })\n    }\n        \n    render(){\n        return(\n                <CreateUpdateExamPage \n        examTitle = {this.state.examTitle}\n        examDate = {this.state.examDate}\n        examStartTime = {this.state.examStartTime}\n        examDuration = {this.state.examDuration}\n        examQuestions = {this.state.examQuestions}\n        examCandidates = {this.state.examCandidates}\n        examPolicy = {this.state.examPolicy}\n        setExamTitle = {this.setExamTitle}\n        setExamDate = {this.setExamDate}\n        setExamStartTime = {this.setExamStartTime}\n        setExamDuration = {this.setExamDuration}\n        setExamQuestions = {this.setExamQuestions}\n        setExamCandidates = {this.setExamCandidates}\n        setExamPolicy = {this.setExamPolicy}\n        deleteExamQuestion = {this.deleteExamQuestion}\n        deleteExamCandidate ={this.deleteExamCandidate}\n        updateExamQuestion = {this.updateExamQuestion}\n        />\n\n  )\n    }   \n\n}"],"sourceRoot":""}